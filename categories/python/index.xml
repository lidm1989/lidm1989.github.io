<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lidm&#39;s blog</title>
    <link>https://lidm1989.github.io/categories/python/index.xml</link>
    <description>Recent content on Lidm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <atom:link href="https://lidm1989.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python核心编程阅读笔记</title>
      <link>https://lidm1989.github.io/python/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;chapter1&#34;&gt;chapter1&lt;/h1&gt;

&lt;h2 id=&#34;python实现&#34;&gt;Python实现&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CPython: C语言&lt;/li&gt;
&lt;li&gt;JPython: Java&lt;/li&gt;
&lt;li&gt;IronPython: C#&lt;/li&gt;
&lt;li&gt;Pypy: Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;chapter2&#34;&gt;chapter2&lt;/h1&gt;

&lt;h1 id=&#34;chapter3&#34;&gt;chapter3&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Python源码剖析阅读笔记</title>
      <link>https://lidm1989.github.io/python/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;00-准备工作&#34;&gt;00: 准备工作&lt;/h1&gt;

&lt;h2 id=&#34;python源码目录&#34;&gt;Python源码目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Include：该目录包含了Python提供的所有头文件，如果用户需要自己用C或C++来编写自定义模块扩展Python，那么就需要乃至这里提供的头文件。&lt;/li&gt;
&lt;li&gt;Lib：该目录包含了Python自带的所有标准库，Lib中的库都是用Python语言编写的。&lt;/li&gt;
&lt;li&gt;Modules: 该目录中包含了所有用C语言编写的模块，比如random, cStringIO等。Modules中的模块是那些对速度要求非常严格的模块，而有一些雄起速度没有太严格要求的模块，比如os，就是用Python编写，并且放在Lib目录下的。&lt;/li&gt;
&lt;li&gt;Parser: 该目录中包含了Python解释器中的Scanner和Parser部分，即对Python源代码进行词法分析和语法分析的部分。除了之些，Parser目录下还包含了一些有用的工具，这些工具能够根据Python语言的语法自动生成Python语言的词法和语法分析器，与YACC非常类似。&lt;/li&gt;
&lt;li&gt;Objects：该目录中包含了所有Python的内建对象，包括整数、list、dict等。同时，该目录还包括了Python在运行时需要的所有的内部使用对象的实现。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Python：该目录下包含了Python解释器中的Compiler和执行引擎部分，是Python运行的核心所在。&lt;/p&gt;

&lt;h2 id=&#34;编译源码&#34;&gt;编译源码&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;./configure&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make install&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;01-python对象初探&#34;&gt;01: Python对象初探&lt;/h1&gt;

&lt;h2 id=&#34;pyobject-head&#34;&gt;PyObject_HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#define PyObject_HEAD                   \
    Py_ssize_t ob_refcnt;               \
    struct _typeobject *ob_type;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyobject&#34;&gt;PyObject&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _object {      
    PyObject_HEAD
} PyObject;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyobject-var-head&#34;&gt;PyObject_VAR_HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#define PyObject_VAR_HEAD               \
    PyObject_HEAD                       \
    Py_ssize_t ob_size; /* Number of items in variable part */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyvarobject&#34;&gt;PyVarObject&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {              
    PyObject_VAR_HEAD
} PyVarObject;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
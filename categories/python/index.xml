<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lidm&#39;s blog</title>
    <link>https://lidm1989.github.io/categories/python/index.xml</link>
    <description>Recent content on lidm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <atom:link href="https://lidm1989.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>import</title>
      <link>https://lidm1989.github.io/python/import/</link>
      <pubDate>Fri, 25 Nov 2016 17:11:17 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/import/</guid>
      <description>

&lt;h1 id=&#34;module&#34;&gt;module&lt;/h1&gt;

&lt;p&gt;模块是一个文件。文件名=模块名+文件后缀，后缀有&lt;code&gt;.py&lt;/code&gt;、&lt;code&gt;.pyc&lt;/code&gt;、&lt;code&gt;.pyo&lt;/code&gt;、&lt;code&gt;.so&lt;/code&gt;等。模块中可以使用&lt;code&gt;__name__&lt;/code&gt;获取模块名。&lt;/p&gt;

&lt;h1 id=&#34;模块搜索路径&#34;&gt;模块搜索路径&lt;/h1&gt;

&lt;p&gt;当模块被导入时，解释器首先搜索&lt;code&gt;built-in&lt;/code&gt;模块，如果未找到，再搜索&lt;code&gt;sys.path&lt;/code&gt;列表。&lt;/p&gt;

&lt;h1 id=&#34;示例1&#34;&gt;示例1&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# file: demo.py

import sys

foo = 1
_bar = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过import导入&#34;&gt;通过import导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import demo
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;demo&#39;]
&amp;gt;&amp;gt;&amp;gt; dir(demo)
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_bar&#39;, &#39;foo&#39;, &#39;sys&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入&#34;&gt;通过from&amp;hellip;import&amp;hellip;导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from demo import foo
&amp;gt;&amp;gt;&amp;gt; from demo import _bar
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_bar&#39;, &#39;foo&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入-1&#34;&gt;通过from&amp;hellip;import * 导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from demo import *
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;foo&#39;, &#39;sys&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;package&#34;&gt;package&lt;/h1&gt;

&lt;p&gt;包是一个目录。包目录下为首的一个文件便是&lt;code&gt;__init__.py&lt;/code&gt;，然后是一些模块文件和子目录，假如子目录中也有&lt;code&gt;__init__.py&lt;/code&gt;那么它就是这个包的子包了。&lt;/p&gt;

&lt;h1 id=&#34;示例2&#34;&gt;示例2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过import导入-1&#34;&gt;通过import导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import sound.effects.echo
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入-2&#34;&gt;通过from&amp;hellip;import&amp;hellip;导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from sound.effects import echo
echo.echofilter(input, output, delay=0.7, atten=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sound.effects.echo import echofilter
echofilter(input, output, delay=0.7, atten=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入-3&#34;&gt;通过from&amp;hellip;import * 导入&lt;/h3&gt;

&lt;p&gt;包作者可以通过在包的&lt;code&gt;__init__.py&lt;/code&gt;里定义&lt;code&gt;__all__&lt;/code&gt;变量来显式指定可以导出的名字&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# file: __init__.py

__all__ = [&amp;quot;echo&amp;quot;, &amp;quot;surround&amp;quot;, &amp;quot;reverse&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有定义&lt;code&gt;__all__&lt;/code&gt;，将会导入所有子模块和&lt;code&gt;__init__.py&lt;/code&gt;中定义的名字&lt;/p&gt;

&lt;h1 id=&#34;包内相互导入&#34;&gt;包内相互导入&lt;/h1&gt;

&lt;h2 id=&#34;subpackages内&#34;&gt;subpackages内&lt;/h2&gt;

&lt;p&gt;可以直接导入，也就是说import语句先搜索当前包，再搜索&lt;code&gt;sys.path&lt;/code&gt;列表。如surround模块可以如下导入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import echo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from echo import echofilter
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;subpackages间&#34;&gt;subpackages间&lt;/h2&gt;

&lt;p&gt;如sound.filter.vocoder导入sound.effects.echo&lt;/p&gt;

&lt;h3 id=&#34;绝对导入&#34;&gt;绝对导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from sound.effects import echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;相对导入&#34;&gt;相对导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from ..effects import echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/tutorial/modules.html&#34;&gt;Python2官网&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://lidm1989.github.io/python/logging/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/logging/</guid>
      <description>

&lt;h1 id=&#34;一个简单的例子&#34;&gt;一个简单的例子&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import logging
logging.warning(&#39;Watch out!&#39;)  # 输出到控制台
logging.info(&#39;I told you so&#39;)  # 什么都不输出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING:root:Watch out!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logging默认输出到控制台，默认输出级别为WARNING，所以INFO级别没有输出。&lt;/p&gt;

&lt;h1 id=&#34;异常处理&#34;&gt;异常处理&lt;/h1&gt;

&lt;p&gt;logging为异常专门提供了&lt;code&gt;logger.exception()&lt;/code&gt;接口以便输出异常，该接口只应该在异常处理时使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    1/0
except:
    logging.exception(&#39;Excepion:&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR:root:Excepion:
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
ZeroDivisionError: integer division or modulo by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;配置日志&#34;&gt;配置日志&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;logging.basicConfig(filename=&#39;example.log&#39;,level=logging.DEBUG)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basicConfig应该在记录日志之前被调用，可以被调用多次，但只有第一次调用会生效。&lt;/p&gt;

&lt;h1 id=&#34;高级话题&#34;&gt;高级话题&lt;/h1&gt;

&lt;p&gt;logging模块提供了loggers, handlers, filters, and formatters更加现代的组件:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loggers:    暴露接口以便应用程序直接调用&lt;/li&gt;
&lt;li&gt;Handlers:   将日志发送到相应目的地&lt;/li&gt;
&lt;li&gt;Filters:    对日志进行过滤&lt;/li&gt;
&lt;li&gt;Formatters: 指定日志的输出格式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;日志的传输方向为: looggers-&amp;gt;handlers-&amp;gt;filters-&amp;gt;formatters。&lt;/p&gt;

&lt;p&gt;logger在概念上处于一个树形结构的名字空间。例如：scan是scan.text、scan.html和scan.pdf的父亲。logger的名字可以是任意字符串，但通常使用模块名:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger = logging.getLogger(__name__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logger的根结点的名字为root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger = logging.getLogger() 等价于 logger = logger.getLogger(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;日志流&#34;&gt;日志流&lt;/h1&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/python/logging_flow.png&#34; alt=&#34;logging images/python/logging_flow.png&#34;&gt;
  
&lt;/figure&gt;


&lt;h1 id=&#34;loggers&#34;&gt;Loggers&lt;/h1&gt;

&lt;p&gt;logger对象有三个任务。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;导出接口以便应用程序进行调用&lt;/li&gt;
&lt;li&gt;通过filter对日志进程过滤&lt;/li&gt;
&lt;li&gt;将日志转发到感兴趣的logger对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;child loggers会转发日志到ancestor loggers，由属性&lt;code&gt;logger.propagate&lt;/code&gt;进行控制。鉴于此，通常只在root logger里设置handlers。&lt;/p&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/library/logging.html&#34;&gt;官方文档-Python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/logging.html&#34;&gt;官方文档-Python3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
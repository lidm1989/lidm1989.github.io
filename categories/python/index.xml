<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lidm&#39;s blog</title>
    <link>https://lidm1989.github.io/categories/python/index.xml</link>
    <description>Recent content on lidm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <atom:link href="https://lidm1989.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python源码剖析阅读笔记</title>
      <link>https://lidm1989.github.io/python/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;00-准备工作&#34;&gt;00: 准备工作&lt;/h1&gt;

&lt;h2 id=&#34;python源码目录&#34;&gt;Python源码目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Include：该目录包含了Python提供的所有头文件，如果用户需要自己用C或C++来编写自定义模块扩展Python，那么就需要乃至这里提供的头文件。&lt;/li&gt;
&lt;li&gt;Lib：该目录包含了Python自带的所有标准库，Lib中的库都是用Python语言编写的。&lt;/li&gt;
&lt;li&gt;Modules: 该目录中包含了所有用C语言编写的模块，比如random, cStringIO等。Modules中的模块是那些对速度要求非常严格的模块，而有一些雄起速度没有太严格要求的模块，比如os，就是用Python编写，并且放在Lib目录下的。&lt;/li&gt;
&lt;li&gt;Parser: 该目录中包含了Python解释器中的Scanner和Parser部分，即对Python源代码进行词法分析和语法分析的部分。除了之些，Parser目录下还包含了一些有用的工具，这些工具能够根据Python语言的语法自动生成Python语言的词法和语法分析器，与YACC非常类似。&lt;/li&gt;
&lt;li&gt;Objects：该目录中包含了所有Python的内建对象，包括整数、list、dict等。同时，该目录还包括了Python在运行时需要的所有的内部使用对象的实现。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Python：该目录下包含了Python解释器中的Compiler和执行引擎部分，是Python运行的核心所在。&lt;/p&gt;

&lt;h2 id=&#34;编译源码&#34;&gt;编译源码&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;./configure&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make install&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;01-python对象初探&#34;&gt;01: Python对象初探&lt;/h1&gt;

&lt;h2 id=&#34;pyobject-head&#34;&gt;PyObject_HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#define PyObject_HEAD                   \
    Py_ssize_t ob_refcnt;               \
    struct _typeobject *ob_type;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyobject&#34;&gt;PyObject&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _object {      
    PyObject_HEAD
} PyObject;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyobject-var-head&#34;&gt;PyObject_VAR_HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#define PyObject_VAR_HEAD               \
    PyObject_HEAD                       \
    Py_ssize_t ob_size; /* Number of items in variable part */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyvarobject&#34;&gt;PyVarObject&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {              
    PyObject_VAR_HEAD
} PyVarObject;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://lidm1989.github.io/python/logging/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/logging/</guid>
      <description>

&lt;h1 id=&#34;一个简单的例子&#34;&gt;一个简单的例子&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import logging
logging.warning(&#39;Watch out!&#39;)  # 输出到控制台
logging.info(&#39;I told you so&#39;)  # 什么都不输出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING:root:Watch out!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logging默认输出到控制台，默认输出级别为WARNING，所以INFO级别没有输出。&lt;/p&gt;

&lt;h1 id=&#34;异常处理&#34;&gt;异常处理&lt;/h1&gt;

&lt;p&gt;logging为异常专门提供了&lt;code&gt;logger.exception()&lt;/code&gt;接口以便输出异常，该接口只应该在异常处理时使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    1/0
except:
    logging.exception(&#39;Excepion:&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR:root:Excepion:
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
ZeroDivisionError: integer division or modulo by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;配置日志&#34;&gt;配置日志&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;logging.basicConfig(filename=&#39;example.log&#39;,level=logging.DEBUG)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basicConfig应该在记录日志之前被调用，可以被调用多次，但只有第一次调用会生效。&lt;/p&gt;

&lt;h1 id=&#34;高级话题&#34;&gt;高级话题&lt;/h1&gt;

&lt;p&gt;logging模块提供了loggers, handlers, filters, and formatters更加现代的组件:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loggers:    暴露接口以便应用程序直接调用&lt;/li&gt;
&lt;li&gt;Handlers:   将日志发送到相应目的地&lt;/li&gt;
&lt;li&gt;Filters:    对日志进行过滤&lt;/li&gt;
&lt;li&gt;Formatters: 指定日志的输出格式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;日志的传输方向为: looggers-&amp;gt;handlers-&amp;gt;filters-&amp;gt;formatters。&lt;/p&gt;

&lt;p&gt;logger在概念上处于一个树形结构的名字空间。例如：scan是scan.text、scan.html和scan.pdf的父亲。logger的名字可以是任意字符串，但通常使用模块名:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger = logging.getLogger(__name__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logger的根结点的名字为root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger = logging.getLogger() 等价于 logger = logger.getLogger(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;日志流&#34;&gt;日志流&lt;/h1&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/python/logging_flow.png&#34; alt=&#34;logging images/python/logging_flow.png&#34;&gt;
  
&lt;/figure&gt;


&lt;h1 id=&#34;loggers&#34;&gt;Loggers&lt;/h1&gt;

&lt;p&gt;logger对象有三个任务。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;导出接口以便应用程序进行调用&lt;/li&gt;
&lt;li&gt;通过filter对日志进程过滤&lt;/li&gt;
&lt;li&gt;将日志转发到感兴趣的logger对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;child loggers会转发日志到ancestor loggers，由属性&lt;code&gt;logger.propagate&lt;/code&gt;进行控制。鉴于此，通常只在root logger里设置handlers。&lt;/p&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/library/logging.html&#34;&gt;官方文档-Python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/logging.html&#34;&gt;官方文档-Python3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
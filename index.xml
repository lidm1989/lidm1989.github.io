<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lidm&#39;s blog</title>
    <link>https://lidm1989.github.io/index.xml</link>
    <description>Recent content on Lidm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 24 Oct 2016 21:14:38 +0800</lastBuildDate>
    <atom:link href="https://lidm1989.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>常用调试工具</title>
      <link>https://lidm1989.github.io/linux/%E5%B8%B8%E7%94%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 24 Oct 2016 21:14:38 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/linux/%E5%B8%B8%E7%94%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description>

&lt;p&gt;linux下常用调试工具&lt;/p&gt;

&lt;h1 id=&#34;fuser&#34;&gt;fuser&lt;/h1&gt;

&lt;p&gt;fuser使用文件或者套节字来识别进程&lt;/p&gt;

&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;fuser &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-n        # 指定namespace(file, tcp, udp)
-m        # 指定挂载点
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lsof&#34;&gt;lsof&lt;/h1&gt;

&lt;p&gt;lsof（list open files）列出当前系统打开文件&lt;/p&gt;

&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;lsof
lsof -p 1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项-1&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-p &amp;lt;pid&amp;gt;  # 指定特定进程
-c &amp;lt;cmd&amp;gt;  # 指定命令
-n        # 不解析主机名
-P        # 不解析端口号
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;gstack&#34;&gt;gstack&lt;/h1&gt;

&lt;p&gt;gstack打印的堆栈信息&lt;/p&gt;

&lt;h3 id=&#34;示例-2&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gstack &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;strace&#34;&gt;strace&lt;/h1&gt;

&lt;p&gt;strace常用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。&lt;/p&gt;

&lt;h3 id=&#34;示例-3&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;strace cat /dev/null
strace -p 1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项-2&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-p &amp;lt;pid&amp;gt;       # 指定特定进程
-o &amp;lt;filename&amp;gt;  # 输出到文件
-f             # 踪子进程
-ff            # 跟-o连用，每个进程输出到各自文件
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tcpdump&#34;&gt;tcpdump&lt;/h1&gt;

&lt;p&gt;tcpdump抓包&lt;/p&gt;

&lt;h3 id=&#34;示例-4&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tcpdump -i eth0 src 192.168.1.1 and tcp port 22
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项-3&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-i &amp;lt;interface&amp;gt;  # 指定网卡
-w &amp;lt;filename&amp;gt;   # 输出到文件
-nn             # 不进行地址解析
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>lvs</title>
      <link>https://lidm1989.github.io/shterm/lvs/</link>
      <pubDate>Sun, 16 Oct 2016 17:16:41 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/shterm/lvs/</guid>
      <description>

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;提高业务系统的处理能力及可靠性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;集群：方案采用多节点集群&lt;/li&gt;
&lt;li&gt;负载均衡：调度器&lt;/li&gt;
&lt;li&gt;高可用：HA&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;方案&#34;&gt;方案&lt;/h1&gt;

&lt;p&gt;pacemaker + lvs + ldirectord&lt;/p&gt;

&lt;p&gt;由于项目的主要负载是rdp及ssh协议，所以lb采用lvs。同时使用pacemaker保证lvs的可靠性。&lt;/p&gt;

&lt;p&gt;集群由lvs进行负载均衡高度，使用pacemaker来保证lvs的高可用。
为了节约成本，lvs由pacemaker随机选取集群节点中的一个节点来运行。调度策略采用lvs的dr模式，调度算法采用lc。&lt;/p&gt;

&lt;h1 id=&#34;实施&#34;&gt;实施&lt;/h1&gt;

&lt;h2 id=&#34;lvs资源&#34;&gt;lvs资源&lt;/h2&gt;

&lt;h2 id=&#34;ldirectord&#34;&gt;ldirectord&lt;/h2&gt;

&lt;h2 id=&#34;lvs要求real-server必须禁止arp响应而virtual-server必须支持arp响应-pacemaker定义资源运行在master-slave模式并与ldirectord绑定关系&#34;&gt;lvs要求real server必须禁止arp响应而virtual server必须支持arp响应，pacemaker定义资源运行在Master/Slave模式并与ldirectord绑定关系。&lt;/h2&gt;

&lt;h1 id=&#34;遗留问题&#34;&gt;遗留问题&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;real server上tcp通过vip连不出来，只能连接到本机&lt;/li&gt;
&lt;li&gt;virtial server上tcp通过vip如果刚好调度到本机的话是可以的，如果调度到real server上tcp超时&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该可能跟策略路由有关系&lt;/p&gt;

&lt;h1 id=&#34;qa&#34;&gt;QA&lt;/h1&gt;

&lt;h2 id=&#34;为什么不用keepalived&#34;&gt;为什么不用keepalived？&lt;/h2&gt;

&lt;p&gt;由于项目中还用其它服务要要进行集群管理，pacemaker更灵活。&lt;/p&gt;

&lt;h2 id=&#34;为什么使用ldirectord&#34;&gt;为什么使用ldirectord？&lt;/h2&gt;

&lt;p&gt;使用ldirectord来更新lvs的高度规则，简化配置管理。&lt;/p&gt;

&lt;h2 id=&#34;为什么使用ansible&#34;&gt;为什么使用ansible?&lt;/h2&gt;

&lt;p&gt;为了简化集群部署，使用ansible部署工具实现集群一键部署的目标。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python核心编程阅读笔记</title>
      <link>https://lidm1989.github.io/python/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/Python%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;chapter1&#34;&gt;chapter1&lt;/h1&gt;

&lt;h2 id=&#34;python实现&#34;&gt;Python实现&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;CPython: C语言&lt;/li&gt;
&lt;li&gt;JPython: Java&lt;/li&gt;
&lt;li&gt;IronPython: C#&lt;/li&gt;
&lt;li&gt;Pypy: Python&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;chapter2&#34;&gt;chapter2&lt;/h1&gt;

&lt;h1 id=&#34;chapter3&#34;&gt;chapter3&lt;/h1&gt;
</description>
    </item>
    
    <item>
      <title>Python源码剖析阅读笔记</title>
      <link>https://lidm1989.github.io/python/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/Python%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</guid>
      <description>

&lt;h1 id=&#34;00-准备工作&#34;&gt;00: 准备工作&lt;/h1&gt;

&lt;h2 id=&#34;python源码目录&#34;&gt;Python源码目录&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Include：该目录包含了Python提供的所有头文件，如果用户需要自己用C或C++来编写自定义模块扩展Python，那么就需要乃至这里提供的头文件。&lt;/li&gt;
&lt;li&gt;Lib：该目录包含了Python自带的所有标准库，Lib中的库都是用Python语言编写的。&lt;/li&gt;
&lt;li&gt;Modules: 该目录中包含了所有用C语言编写的模块，比如random, cStringIO等。Modules中的模块是那些对速度要求非常严格的模块，而有一些雄起速度没有太严格要求的模块，比如os，就是用Python编写，并且放在Lib目录下的。&lt;/li&gt;
&lt;li&gt;Parser: 该目录中包含了Python解释器中的Scanner和Parser部分，即对Python源代码进行词法分析和语法分析的部分。除了之些，Parser目录下还包含了一些有用的工具，这些工具能够根据Python语言的语法自动生成Python语言的词法和语法分析器，与YACC非常类似。&lt;/li&gt;
&lt;li&gt;Objects：该目录中包含了所有Python的内建对象，包括整数、list、dict等。同时，该目录还包括了Python在运行时需要的所有的内部使用对象的实现。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Python：该目录下包含了Python解释器中的Compiler和执行引擎部分，是Python运行的核心所在。&lt;/p&gt;

&lt;h2 id=&#34;编译源码&#34;&gt;编译源码&lt;/h2&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;./configure&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;make install&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;01-python对象初探&#34;&gt;01: Python对象初探&lt;/h1&gt;

&lt;h2 id=&#34;pyobject-head&#34;&gt;PyObject_HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#define PyObject_HEAD                   \
    Py_ssize_t ob_refcnt;               \
    struct _typeobject *ob_type;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyobject&#34;&gt;PyObject&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;typedef struct _object {      
    PyObject_HEAD
} PyObject;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyobject-var-head&#34;&gt;PyObject_VAR_HEAD&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#define PyObject_VAR_HEAD               \
    PyObject_HEAD                       \
    Py_ssize_t ob_size; /* Number of items in variable part */
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pyvarobject&#34;&gt;PyVarObject&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;typedef struct {              
    PyObject_VAR_HEAD
} PyVarObject;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>lidm&#39;s blog</title>
    <link>https://lidm1989.github.io/index.xml</link>
    <description>Recent content on lidm&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <lastBuildDate>Tue, 10 Jan 2017 17:28:53 +0800</lastBuildDate>
    <atom:link href="https://lidm1989.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>reset-checkout-revert</title>
      <link>https://lidm1989.github.io/git/reset-checkout-revert/</link>
      <pubDate>Tue, 10 Jan 2017 17:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/git/reset-checkout-revert/</guid>
      <description>

&lt;h1 id=&#34;reset-checkout-and-revert&#34;&gt;Reset, Checkout and Revert&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;、&lt;code&gt;git checkout&lt;/code&gt;和&lt;code&gt;git revert&lt;/code&gt;是git工具集中最常用的一些命令。它们都允许你对你的仓库undo某类改动，&lt;code&gt;git reset&lt;/code&gt;和&lt;code&gt;git checkout&lt;/code&gt;可作用于commits或files，revert只能作用于commits。&lt;/p&gt;

&lt;p&gt;由于它们的功能非常的相似，在开发过程中很难区分哪个命令应该用于哪个开发场景。在这篇文章中我们将会比较这三个命令。希望你能在你的仓库中熟练地使用这些命令。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/01.svg&#34; alt=&#34;reset-checkout-revert images/git/01.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;当你浏览这篇文章时，把每个命令的作用效果与git仓库的三个概念（工作目录，暂存区，提交历史）结合起来会对你很有帮助。&lt;/p&gt;

&lt;h1 id=&#34;commit级操作&#34;&gt;Commit级操作&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;和&lt;code&gt;git checkout&lt;/code&gt;根据传入的参数来决定其作用的范围。当参数中不含有文件路径时，它们作用于整个commits。这正是我们这个部分所要讨论的。注意，&lt;code&gt;git revert&lt;/code&gt;不作用于files。&lt;/p&gt;

&lt;h3 id=&#34;reset&#34;&gt;Reset&lt;/h3&gt;

&lt;p&gt;当作用于commit时，reset可以用于改变分支指针的指向。这可以被用来删除当前分支的commits。例如，下面的命令将hotfix分支向后移动两个commits。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout hotfix
git reset HEAD~2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;hostfix分支尾部的两个commits现在处于悬挂状态，这意味着在下次git执行垃圾回收时这两个commits会被删除。换句话说，你在告诉git正在抛弃这两个commits。请看下面图示：&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/02.svg&#34; alt=&#34;reset-checkout-revert images/git/02.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;的这种用法常用于undo还没有被共享的改动。当你正添加一个新的feature且突然想重新开始时，这是你的goto命令。&lt;/p&gt;

&lt;p&gt;除了在当前分支来回移动，通过命令行选项&lt;code&gt;git reset&lt;/code&gt;也可用来改动暂存区和工作目录：
* &amp;ndash;soft  &amp;ndash; 不改动暂存区和工作目录
* &amp;ndash;mixed &amp;ndash; 更新暂存区到特定的commit，但是不改动工作目录。这是默认行为。
* &amp;ndash;hard  &amp;ndash; 更新暂存区和工作目录到特定commit&lt;/p&gt;

&lt;p&gt;请看下面图示：&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/03.svg&#34; alt=&#34;reset-checkout-revert images/git/03.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;这些选项常被用于HEAD commit。例如，&lt;code&gt;git reset --mixed HEAD&lt;/code&gt;将暂存区的改动移回工作目录。另外，如果你想完全抛弃所有未提交的改动，可以使用&lt;code&gt;git reset --hard HEAD&lt;/code&gt;。这两个场景也是最常用的。&lt;/p&gt;

&lt;p&gt;当&lt;code&gt;git reset&lt;/code&gt;作用于非HEAD commit时一定要格外小心，因为它变更了commit history。&lt;/p&gt;

&lt;h3 id=&#34;checkout&#34;&gt;Checkout&lt;/h3&gt;

&lt;p&gt;现在你应该很熟悉&lt;code&gt;git commit&lt;/code&gt;作用于commits了。当作用于分支名时，它允许你在在分支间进行切换。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout hotfix
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上面的命令将HEAD指向另一个分支并更新工作目录到相应分支。由于这个命令有可能覆盖本地的变更，git会要求我们commit或stash工作目录可能会被覆盖的变更。&lt;code&gt;git reset&lt;/code&gt;与&lt;code&gt;git checkout&lt;/code&gt;不切换分支。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/04.svg&#34; alt=&#34;reset-checkout-revert images/git/04.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;如果作用于commits，&lt;code&gt;git checkout&lt;/code&gt;可以指向任意的commit。这和切换分支类似：将HEAD指向特定的commit。例如：下面的命令将HEAD指向当前commit的祖父commit。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout HEAD~2
&lt;/code&gt;&lt;/pre&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/05.svg&#34; alt=&#34;reset-checkout-revert images/git/05.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;当查看工程的历史版本时非常有用。然而，由于没有分支引用当前HEAD，这使你处于detached HEAD state。如果你添加了一些新的commits那就非常危险了，国为当你切换到其它分支后，再没有办法回到刚在的位置了。基于这个原因，你应该在提交commits到detached HEAD这前创建一个新的分支。&lt;/p&gt;

&lt;h3 id=&#34;revert&#34;&gt;Revert&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;git revert&lt;/code&gt;通过添加一个新的commit来undo commits。由于这不改变commit history，所以这是undo变更的安全方法。例如，下面的命令将计算出倒数第三次commit，创建一个新的commit来undo那次的改变。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout hotfix
git revert HEAD~2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请看下面图示：&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/06.svg&#34; alt=&#34;reset-checkout-revert images/git/06.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;与&lt;code&gt;git reset&lt;/code&gt;相比，&lt;code&gt;git reset&lt;/code&gt;会改写已存在的commit history。由于这个原因，&lt;code&gt;git revert&lt;/code&gt;应该在公共分支上来进行undo，&lt;code&gt;git reset&lt;/code&gt;应该在私有分支上进行undo。&lt;/p&gt;

&lt;p&gt;你也可以认为&lt;code&gt;git revert&lt;/code&gt;用来undo已提交的变更，而&lt;code&gt;git reset&lt;/code&gt;用来undo未提交的变更。&lt;/p&gt;

&lt;p&gt;像&lt;code&gt;git checkout&lt;/code&gt;一样，&lt;code&gt;git revert&lt;/code&gt;有可能会覆盖工作目录中的文件，因此它将会询问你是否commit或stash在本次操作中可能会丢失的变更。&lt;/p&gt;

&lt;h1 id=&#34;file级操作&#34;&gt;File级操作&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;和&lt;code&gt;git checkout&lt;/code&gt;可以接收可选的文件路径作为参数。这戏剧性的改变了它们的行为，使它们不再作用于整个commit，而是强制它们的作用于单个文件。&lt;/p&gt;

&lt;h3 id=&#34;reset-1&#34;&gt;Reset&lt;/h3&gt;

&lt;p&gt;当使用文件路径作为&lt;code&gt;git reset&lt;/code&gt;的参数时，&lt;code&gt;git rest&lt;/code&gt;更新暂存区到特定的commit。例如，下面的命令将获取foo.py的祖父版本并将其更新到暂存区以备下次提交。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git reset HEAD~2 foo.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和&lt;code&gt;git reset&lt;/code&gt;的Commit级操作一样，&lt;code&gt;git reset&lt;/code&gt;通常和HEAD一起使用。&lt;code&gt;git reset HEAD foo.py&lt;/code&gt;将unstage foo.py。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/07.svg&#34; alt=&#34;reset-checkout-revert images/git/07.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;&lt;code&gt;--soft&lt;/code&gt;、&lt;code&gt;--mixed&lt;/code&gt;和&lt;code&gt;--hard&lt;/code&gt;选项对File级的&lt;code&gt;git reset&lt;/code&gt;不起作用，也就是说，&lt;code&gt;git reset&lt;/code&gt;只更新暂存区，而从不更新工作目录。&lt;/p&gt;

&lt;h3 id=&#34;checkout-1&#34;&gt;Checkout&lt;/h3&gt;

&lt;p&gt;当使用文件路径作为&lt;code&gt;git checkout&lt;/code&gt;的参数时，&lt;code&gt;git checkout&lt;/code&gt;只更新工作目录。和该命令Commit级操作不同的是，&lt;code&gt;git checkout&lt;/code&gt;不会改变HEAD的指向，这意味着它不会切换当前分支。&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/git/08.svg&#34; alt=&#34;reset-checkout-revert images/git/08.svg&#34;&gt;
  
&lt;/figure&gt;


&lt;p&gt;例如：下面的命令更新工作目录的foo.py为它的祖父版本。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git checkout HEAD~2 foo.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;和&lt;code&gt;git checkout&lt;/code&gt;的Commit级操作一样，&lt;code&gt;git checkout&lt;/code&gt;可以用来查看工程的历史版本，只不过只能查看特定的文件了。&lt;/p&gt;

&lt;p&gt;当你暂存并且提交检出的文件时，&lt;code&gt;git checkout&lt;/code&gt;的效果和&lt;code&gt;git revert&lt;/code&gt;非常相似。但是&lt;code&gt;git checkout&lt;/code&gt;撤销了检出版本之后的所有变更，而&lt;code&gt;git revert&lt;/code&gt;只撤销了特定版本的变更。&lt;/p&gt;

&lt;p&gt;和&lt;code&gt;git reset&lt;/code&gt;一样，&lt;code&gt;git checkout&lt;/code&gt;通常和HEAD一起使用。例如，&lt;code&gt;git checkout HEAD foo.py&lt;/code&gt;丢弃对foo.py所有未提交的改动。这和&lt;code&gt;git reset HEAD --hard&lt;/code&gt;非常相似，但是它只作用于特定的文件。&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;git reset&lt;/code&gt;、&lt;code&gt;git checkout&lt;/code&gt;和&lt;code&gt;git revert&lt;/code&gt;很容易混淆，但是当你将它们的作用效果与工作目录、暂存区和提交历史相结合时，就会很容易区分它们各自的使用场景了。&lt;/p&gt;

&lt;p&gt;下面对这些命令最常用的场景进行了总结：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt;：&lt;strong&gt;Commit级&lt;/strong&gt;：丢弃对私有分支的提交或丢弃未提交的改动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git reset&lt;/code&gt;：&lt;strong&gt;File级&lt;/strong&gt;：撤销暂存区中的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt;：&lt;strong&gt;Commit级&lt;/strong&gt;：切换分支或查看历史版本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git checkout&lt;/code&gt;：&lt;strong&gt;File级&lt;/strong&gt;：丢弃对工作目录的改动&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git revert&lt;/code&gt;：&lt;strong&gt;Commit级&lt;/strong&gt;：在公开分支上进行撤消&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git revert&lt;/code&gt;：&lt;strong&gt;File级&lt;/strong&gt;：不适用&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;原英文链接&#34;&gt;原英文链接&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/resetting-checking-out-and-reverting&#34;&gt;resetting-checking-out-and-reverting&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>import</title>
      <link>https://lidm1989.github.io/python/import/</link>
      <pubDate>Fri, 25 Nov 2016 17:11:17 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/import/</guid>
      <description>

&lt;h1 id=&#34;module&#34;&gt;module&lt;/h1&gt;

&lt;p&gt;模块是一个文件。文件名=模块名+文件后缀，后缀有&lt;code&gt;.py&lt;/code&gt;、&lt;code&gt;.pyc&lt;/code&gt;、&lt;code&gt;.pyo&lt;/code&gt;、&lt;code&gt;.so&lt;/code&gt;等。模块中可以使用&lt;code&gt;__name__&lt;/code&gt;获取模块名。&lt;/p&gt;

&lt;h1 id=&#34;模块搜索路径&#34;&gt;模块搜索路径&lt;/h1&gt;

&lt;p&gt;当模块被导入时，解释器首先搜索&lt;code&gt;built-in&lt;/code&gt;模块，如果未找到，再搜索&lt;code&gt;sys.path&lt;/code&gt;列表。&lt;/p&gt;

&lt;h1 id=&#34;示例1&#34;&gt;示例1&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;# file: demo.py

import sys

foo = 1
_bar = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过import导入&#34;&gt;通过import导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; import demo
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;demo&#39;]
&amp;gt;&amp;gt;&amp;gt; dir(demo)
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__file__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_bar&#39;, &#39;foo&#39;, &#39;sys&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入&#34;&gt;通过from&amp;hellip;import&amp;hellip;导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from demo import foo
&amp;gt;&amp;gt;&amp;gt; from demo import _bar
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;_bar&#39;, &#39;foo&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入-1&#34;&gt;通过from&amp;hellip;import * 导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; from demo import *
&amp;gt;&amp;gt;&amp;gt; dir()
[&#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;foo&#39;, &#39;sys&#39;]
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;package&#34;&gt;package&lt;/h1&gt;

&lt;p&gt;包是一个目录。包目录下为首的一个文件便是&lt;code&gt;__init__.py&lt;/code&gt;，然后是一些模块文件和子目录，假如子目录中也有&lt;code&gt;__init__.py&lt;/code&gt;那么它就是这个包的子包了。&lt;/p&gt;

&lt;h1 id=&#34;示例2&#34;&gt;示例2&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;sound/                          Top-level package
      __init__.py               Initialize the sound package
      formats/                  Subpackage for file format conversions
              __init__.py
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              __init__.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              __init__.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过import导入-1&#34;&gt;通过import导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;import sound.effects.echo
sound.effects.echo.echofilter(input, output, delay=0.7, atten=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入-2&#34;&gt;通过from&amp;hellip;import&amp;hellip;导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from sound.effects import echo
echo.echofilter(input, output, delay=0.7, atten=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from sound.effects.echo import echofilter
echofilter(input, output, delay=0.7, atten=4)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;通过from-import-导入-3&#34;&gt;通过from&amp;hellip;import * 导入&lt;/h3&gt;

&lt;p&gt;包作者可以通过在包的&lt;code&gt;__init__.py&lt;/code&gt;里定义&lt;code&gt;__all__&lt;/code&gt;变量来显式指定可以导出的名字&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# file: __init__.py

__all__ = [&amp;quot;echo&amp;quot;, &amp;quot;surround&amp;quot;, &amp;quot;reverse&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果没有定义&lt;code&gt;__all__&lt;/code&gt;，将会导入所有子模块和&lt;code&gt;__init__.py&lt;/code&gt;中定义的名字&lt;/p&gt;

&lt;h1 id=&#34;包内相互导入&#34;&gt;包内相互导入&lt;/h1&gt;

&lt;h2 id=&#34;subpackages内&#34;&gt;subpackages内&lt;/h2&gt;

&lt;p&gt;可以直接导入，也就是说import语句先搜索当前包，再搜索&lt;code&gt;sys.path&lt;/code&gt;列表。如surround模块可以如下导入：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import echo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from echo import echofilter
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;subpackages间&#34;&gt;subpackages间&lt;/h2&gt;

&lt;p&gt;如sound.filter.vocoder导入sound.effects.echo&lt;/p&gt;

&lt;h3 id=&#34;绝对导入&#34;&gt;绝对导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from sound.effects import echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;相对导入&#34;&gt;相对导入&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;from ..effects import echo
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;参考&#34;&gt;参考&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.python.org/2/tutorial/modules.html&#34;&gt;Python2官网&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>记windows通过linux共享上网</title>
      <link>https://lidm1989.github.io/linux/%E8%AE%B0windows%E9%80%9A%E8%BF%87linux%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91/</link>
      <pubDate>Sat, 29 Oct 2016 22:31:40 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/linux/%E8%AE%B0windows%E9%80%9A%E8%BF%87linux%E5%85%B1%E4%BA%AB%E4%B8%8A%E7%BD%91/</guid>
      <description>

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;女友家用笔记本的无线网卡突然罢工了，尝试有线还是能用的。但是网线连接到路由器不够长。我本人台式机装的是archlinux，一块有线网卡，一块USB无线网卡，平时使用USB无线网卡上网。两电脑距离较近，使用网线完全合适，于是想到能不能让windows通过linux上网。作为一个爱折腾的码农，关键时候怎能不好好表现一下，说干就干。&lt;/p&gt;

&lt;h1 id=&#34;环境&#34;&gt;环境&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;windows7笔记本一台，双网卡, 一块有线网卡（没用），一块无线网卡（已坏）&lt;/li&gt;
&lt;li&gt;archlinux台式机一台，双网卡，一块有线网卡（没用），一块USB无线网卡（正常上网）&lt;/li&gt;
&lt;li&gt;普通网线（双绞线）一根&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目的：通过网线连接两块有线网卡，使windows通过linux上网&lt;/p&gt;

&lt;h1 id=&#34;配置步骤&#34;&gt;配置步骤&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;用网线连接两块有线网卡&lt;/li&gt;
&lt;li&gt;开启ip转发&lt;code&gt;sysctl net.ipv4.ip_forward=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;开启nat伪装&lt;code&gt;iptables -t nat -A POSTROUTING -j MASQUERADE&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置linux有线网卡静态IP: &lt;code&gt;192.168.1.2/24&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置windows有线网卡静态IP: &lt;code&gt;192.168.1.3&lt;/code&gt;，MASK: &lt;code&gt;255.255.255.0&lt;/code&gt;, GATEWAY: &lt;code&gt;192.168.1.2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;配置windows的DNS为linux机器上的DNS或者google公共DNS: 8.8.8.8&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;观察网络&#34;&gt;观察网络&lt;/h1&gt;

&lt;p&gt;在linux上观察windows ping百度的网络数据，其中192.168.0.114是linux上USB无线网卡的IP地址：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@arch ~]# tcpdump -i any -nn icmp
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on any, link-type LINUX_SLL (Linux cooked), capture size 262144 bytes
23:00:03.298518 IP 192.168.1.3 &amp;gt; 115.239.210.27: ICMP echo request, id 1, seq 54, length 40
23:00:03.298560 IP 192.168.0.114 &amp;gt; 115.239.210.27: ICMP echo request, id 1, seq 54, length 40
23:00:03.307090 IP 115.239.210.27 &amp;gt; 192.168.0.114: ICMP echo reply, id 1, seq 54, length 40
23:00:03.307120 IP 115.239.210.27 &amp;gt; 192.168.1.3: ICMP echo reply, id 1, seq 54, length 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;分析:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;由于windows网关为192.168.1.2，windows将数据包发送到linux有线网卡&lt;/li&gt;
&lt;li&gt;由于linux开启了ip转发，linux将数据包通过无线网卡发送到路由并启用nat伪装&lt;/li&gt;
&lt;li&gt;接着路由将回应包发送到linux无线网卡&lt;/li&gt;
&lt;li&gt;此时linux知道该包是自己nat伪装的，将数据包通过有线网卡转发到windows&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;windows与linux通过网线组成的局域网不能和无线网处于同一网段&lt;/li&gt;
&lt;li&gt;必须配置windows的网关为linux上有线网卡的IP地址&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>常用调试工具</title>
      <link>https://lidm1989.github.io/linux/%E5%B8%B8%E7%94%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Mon, 24 Oct 2016 21:14:38 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/linux/%E5%B8%B8%E7%94%A8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7/</guid>
      <description>

&lt;p&gt;linux下常用调试工具&lt;/p&gt;

&lt;h1 id=&#34;fuser&#34;&gt;fuser&lt;/h1&gt;

&lt;p&gt;fuser使用文件或者套节字来识别进程&lt;/p&gt;

&lt;h3 id=&#34;示例&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;fuser &amp;lt;filename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-n        # 指定namespace(file, tcp, udp)
-m        # 指定挂载点
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;lsof&#34;&gt;lsof&lt;/h1&gt;

&lt;p&gt;lsof（list open files）列出当前系统打开文件&lt;/p&gt;

&lt;h3 id=&#34;示例-1&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;lsof
lsof -p 1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项-1&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-p &amp;lt;pid&amp;gt;  # 指定特定进程
-c &amp;lt;cmd&amp;gt;  # 指定命令
-n        # 不解析主机名
-P        # 不解析端口号
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;gstack&#34;&gt;gstack&lt;/h1&gt;

&lt;p&gt;gstack打印的堆栈信息&lt;/p&gt;

&lt;h3 id=&#34;示例-2&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;gstack &amp;lt;pid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;strace&#34;&gt;strace&lt;/h1&gt;

&lt;p&gt;strace常用来跟踪进程执行时的系统调用和所接收的信号。 在Linux世界，进程不能直接访问硬件设备，当进程需要访问硬件设备(比如读取磁盘文件，接收网络数据等等)时，必须由用户态模式切换至内核态模式，通过系统调用访问硬件设备。strace可以跟踪到一个进程产生的系统调用,包括参数，返回值，执行消耗的时间。&lt;/p&gt;

&lt;h3 id=&#34;示例-3&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;strace cat /dev/null
strace -p 1234
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项-2&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-p &amp;lt;pid&amp;gt;       # 指定特定进程
-o &amp;lt;filename&amp;gt;  # 输出到文件
-f             # 踪子进程
-ff            # 跟-o连用，每个进程输出到各自文件
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;tcpdump&#34;&gt;tcpdump&lt;/h1&gt;

&lt;p&gt;tcpdump抓包&lt;/p&gt;

&lt;h3 id=&#34;示例-4&#34;&gt;示例&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;tcpdump -i eth0 src 192.168.1.1 and tcp port 22
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;常用选项-3&#34;&gt;常用选项&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-i &amp;lt;interface&amp;gt;  # 指定网卡
-w &amp;lt;filename&amp;gt;   # 输出到文件
-nn             # 不进行地址解析
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>lvs</title>
      <link>https://lidm1989.github.io/shterm/lvs/</link>
      <pubDate>Sun, 16 Oct 2016 17:16:41 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/shterm/lvs/</guid>
      <description>

&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;

&lt;p&gt;提高业务系统的处理能力及可靠性&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;集群：方案采用多节点集群&lt;/li&gt;
&lt;li&gt;负载均衡：调度器&lt;/li&gt;
&lt;li&gt;高可用：HA&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;方案&#34;&gt;方案&lt;/h1&gt;

&lt;p&gt;pacemaker + lvs + ldirectord&lt;/p&gt;

&lt;p&gt;由于项目的主要负载是rdp及ssh协议，所以lb采用lvs。同时使用pacemaker保证lvs的可靠性。&lt;/p&gt;

&lt;p&gt;集群由lvs进行负载均衡高度，使用pacemaker来保证lvs的高可用。
为了节约成本，lvs由pacemaker随机选取集群节点中的一个节点来运行。调度策略采用lvs的dr模式，调度算法采用lc。&lt;/p&gt;

&lt;h1 id=&#34;实施&#34;&gt;实施&lt;/h1&gt;

&lt;p&gt;由于lvs要求real server必须禁止arp响应而virtual server必须支持arp响应，所以pacemaker定义资源运行在Master/Slave模式并与ldirectord绑定关系。&lt;/p&gt;

&lt;h3 id=&#34;lvs资源&#34;&gt;lvs资源&lt;/h3&gt;

&lt;p&gt;lvs运行在master/slave模式。master节点在指定网卡上配置vip，响应arp，并启用转发；slave节点在网卡lo上配置vip，不响应arp。&lt;/p&gt;

&lt;p&gt;响应arp需要通知路由更新arp表，由程序send_arp向路由发送更新消息，该程序由resource-agents的IPaddr中提取，IPaddr位于/usr/lib/ocf/resource.d/heartbeat/IPaddr。&lt;/p&gt;

&lt;p&gt;以下agent脚本由pacemaker提供的Stateful模板改编而来，模版默认位于/usr/lib/ocf/resource.d/pacemaker/Stateful。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件名：lvs&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
#
#
#   Example of a stateful OCF Resource Agent. 
#
# Copyright (c) 2006 Andrew Beekhof
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of version 2 of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# Further, this software is distributed without any warranty that it is
# free of the rightful claim of any third person regarding infringement
# or the like.  Any license provided herein, whether implied or
# otherwise, applies only to this software file.  Patent licenses, if
# any, provided herein do not apply to combinations of this program with
# other software, or any other product whatsoever.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc., 59 Temple Place - Suite 330, Boston MA 02111-1307, USA.
#

#######################################################################
# Initialization:

: ${OCF_FUNCTIONS=${OCF_ROOT}/resource.d/heartbeat/.ocf-shellfuncs}
. ${OCF_FUNCTIONS}
: ${__OCF_ACTION=$1}
CRM_MASTER=&amp;quot;${HA_SBIN_DIR}/crm_master -l reboot&amp;quot;

NIC=$OCF_RESKEY_nic
VIP=$OCF_RESKEY_vip
PREFIX=$OCF_RESKEY_vip_prefix
PREFIX=32
PORT=80

#######################################################################

meta_data() {
    cat &amp;lt;&amp;lt;END
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE resource-agent SYSTEM &amp;quot;ra-api-1.dtd&amp;quot;&amp;gt;
&amp;lt;resource-agent name=&amp;quot;Stateful&amp;quot; version=&amp;quot;1.0&amp;quot;&amp;gt;
&amp;lt;version&amp;gt;1.0&amp;lt;/version&amp;gt;

&amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt;
This is an example resource agent that impliments two states
&amp;lt;/longdesc&amp;gt;
&amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;Example stateful resource agent&amp;lt;/shortdesc&amp;gt;

&amp;lt;parameters&amp;gt;

&amp;lt;parameter name=&amp;quot;state&amp;quot; unique=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt;
Location to store the resource state in
&amp;lt;/longdesc&amp;gt;
&amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;State file&amp;lt;/shortdesc&amp;gt;
&amp;lt;content type=&amp;quot;string&amp;quot; default=&amp;quot;${HA_VARRUN}/Stateful-{OCF_RESOURCE_INSTANCE}.state&amp;quot; /&amp;gt;
&amp;lt;/parameter&amp;gt;

&amp;lt;parameter name=&amp;quot;nic&amp;quot;&amp;gt;
&amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt;network interface card&amp;lt;/longdesc&amp;gt;
&amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;nic&amp;lt;/shortdesc&amp;gt;
&amp;lt;content type=&amp;quot;string&amp;quot; default=&amp;quot;eth0&amp;quot;/&amp;gt;
&amp;lt;/parameter&amp;gt;

&amp;lt;parameter name=&amp;quot;vip&amp;quot; required=&amp;quot;1&amp;quot;&amp;gt;
&amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt;virtual ip&amp;lt;/longdesc&amp;gt;
&amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;vip&amp;lt;/shortdesc&amp;gt;
&amp;lt;content type=&amp;quot;string&amp;quot;/&amp;gt;
&amp;lt;/parameter&amp;gt;

&amp;lt;parameter name=&amp;quot;vip_prefix&amp;quot;&amp;gt;
&amp;lt;longdesc lang=&amp;quot;en&amp;quot;&amp;gt;virtual ip prefix&amp;lt;/longdesc&amp;gt;
&amp;lt;shortdesc lang=&amp;quot;en&amp;quot;&amp;gt;prefix&amp;lt;/shortdesc&amp;gt;
&amp;lt;content type=&amp;quot;string&amp;quot; default=&amp;quot;32&amp;quot;/&amp;gt;
&amp;lt;/parameter&amp;gt;

&amp;lt;/parameters&amp;gt;

&amp;lt;actions&amp;gt;
&amp;lt;action name=&amp;quot;start&amp;quot;   timeout=&amp;quot;20&amp;quot; /&amp;gt;
&amp;lt;action name=&amp;quot;stop&amp;quot;    timeout=&amp;quot;20&amp;quot; /&amp;gt;
&amp;lt;action name=&amp;quot;monitor&amp;quot; depth=&amp;quot;0&amp;quot;  timeout=&amp;quot;20&amp;quot; interval=&amp;quot;10&amp;quot; role=&amp;quot;Master&amp;quot;/&amp;gt;
&amp;lt;action name=&amp;quot;monitor&amp;quot; depth=&amp;quot;0&amp;quot;  timeout=&amp;quot;20&amp;quot; interval=&amp;quot;10&amp;quot; role=&amp;quot;Slave&amp;quot;/&amp;gt;
&amp;lt;action name=&amp;quot;meta-data&amp;quot;  timeout=&amp;quot;5&amp;quot; /&amp;gt;
&amp;lt;action name=&amp;quot;validate-all&amp;quot;  timeout=&amp;quot;30&amp;quot; /&amp;gt;
&amp;lt;/actions&amp;gt;
&amp;lt;/resource-agent&amp;gt;
END
    exit $OCF_SUCCESS
}

#######################################################################

lvs_cleanup() {
    ip addr del dev lo $VIP/$PREFIX
    ip addr del dev $NIC $VIP/$PREFIX

    sysctl net.ipv4.conf.all.forwarding=0

    sysctl net.ipv4.conf.all.arp_ignore=0
    sysctl net.ipv4.conf.all.arp_announce=0
    sysctl net.ipv4.conf.lo.arp_ignore=0
    sysctl net.ipv4.conf.lo.arp_announce=0

    return $OCF_SUCCESS
}

lvs_master() {
    ip addr del dev lo $VIP/$PREFIX
    ip addr add dev $NIC $VIP/$PREFIX

    sysctl net.ipv4.conf.all.forwarding=1

    sysctl net.ipv4.conf.all.arp_ignore=0
    sysctl net.ipv4.conf.all.arp_announce=0
    sysctl net.ipv4.conf.lo.arp_ignore=0
    sysctl net.ipv4.conf.lo.arp_announce=0

    ipvsadm -C

    /usr/libexec/heartbeat/send_arp -i 200 -r 5  $NIC $VIP auto not_used not_used

    return $OCF_SUCCESS
}

lvs_slave() {
    ip addr add dev lo $VIP/$PREFIX
    ip addr del dev $NIC $VIP/$PREFIX

    sysctl net.ipv4.conf.all.forwarding=1

    sysctl net.ipv4.conf.all.arp_ignore=1
    sysctl net.ipv4.conf.all.arp_announce=2
    sysctl net.ipv4.conf.lo.arp_ignore=1
    sysctl net.ipv4.conf.lo.arp_announce=2

    ipvsadm -C

    return $OCF_SUCCESS
}

stateful_usage() {
    cat &amp;lt;&amp;lt;END
usage: $0 {start|stop|promote|demote|monitor|validate-all|meta-data}

Expects to have a fully populated OCF RA-compliant environment set.
END
    exit $1
}

stateful_update() {
    echo $1 &amp;gt; ${OCF_RESKEY_state}
}

stateful_check_state() {
    target=$1
    if [ -f ${OCF_RESKEY_state} ]; then
    state=`cat ${OCF_RESKEY_state}`
    if [ &amp;quot;x$target&amp;quot; = &amp;quot;x$state&amp;quot; ]; then
        return 0
    fi

    else
    if [ &amp;quot;x$target&amp;quot; = &amp;quot;x&amp;quot; ]; then
        return 0
    fi
    fi

    return 1
}

stateful_start() {
    stateful_check_state master
    if [ $? = 0 ]; then
        # CRM Error - Should never happen
    return $OCF_RUNNING_MASTER
    fi
    stateful_update slave
    lvs_slave
    $CRM_MASTER -v ${slave_score}
    return 0
}

stateful_demote() {
    stateful_check_state 
    if [ $? = 0 ]; then
        # CRM Error - Should never happen
    return $OCF_NOT_RUNNING
    fi
    stateful_update slave
    lvs_slave
    $CRM_MASTER -v ${slave_score}
    return 0
}

stateful_promote() {
    stateful_check_state 
    if [ $? = 0 ]; then
    return $OCF_NOT_RUNNING
    fi
    stateful_update master
    lvs_master
    $CRM_MASTER -v ${master_score}
    return 0
}

stateful_stop() {
    lvs_cleanup
    $CRM_MASTER -D
    stateful_check_state master
    if [ $? = 0 ]; then
        # CRM Error - Should never happen
    return $OCF_RUNNING_MASTER
    fi
    if [ -f ${OCF_RESKEY_state} ]; then
    rm ${OCF_RESKEY_state}
    fi
    return 0
}

stateful_monitor() {
    stateful_check_state &amp;quot;master&amp;quot;
    if [ $? = 0 ]; then
    if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then
        # Restore the master setting during probes
        $CRM_MASTER -v ${master_score}
    fi
    return $OCF_RUNNING_MASTER
    fi

    stateful_check_state &amp;quot;slave&amp;quot;
    if [ $? = 0 ]; then
    if [ $OCF_RESKEY_CRM_meta_interval = 0 ]; then
        # Restore the master setting during probes
        $CRM_MASTER -v ${slave_score}
    fi
    return $OCF_SUCCESS
    fi

    if [ -f ${OCF_RESKEY_state} ]; then
    echo &amp;quot;File &#39;${OCF_RESKEY_state}&#39; exists but contains unexpected contents&amp;quot;
    cat ${OCF_RESKEY_state}
    return $OCF_ERR_GENERIC
    fi
    return 7
}

stateful_validate() {
    exit $OCF_SUCCESS
}

: ${slave_score=5}
: ${master_score=10}

: ${OCF_RESKEY_CRM_meta_interval=0}
: ${OCF_RESKEY_CRM_meta_globally_unique:=&amp;quot;true&amp;quot;}

if [ &amp;quot;x$OCF_RESKEY_state&amp;quot; = &amp;quot;x&amp;quot; ]; then
    if [ ${OCF_RESKEY_CRM_meta_globally_unique} = &amp;quot;false&amp;quot; ]; then
    state=&amp;quot;${HA_VARRUN}/Stateful-${OCF_RESOURCE_INSTANCE}.state&amp;quot;

    # Strip off the trailing clone marker
    OCF_RESKEY_state=`echo $state | sed s/:[0-9][0-9]*\.state/.state/`
    else 
    OCF_RESKEY_state=&amp;quot;${HA_VARRUN}/Stateful-${OCF_RESOURCE_INSTANCE}.state&amp;quot;
    fi
fi

case $__OCF_ACTION in
meta-data)  meta_data;;
start)      stateful_start;;
promote)    stateful_promote;;
demote)     stateful_demote;;
stop)       stateful_stop;;
monitor)    stateful_monitor;;
validate-all)   stateful_validate;;
usage|help) stateful_usage $OCF_SUCCESS;;
*)      stateful_usage $OCF_ERR_UNIMPLEMENTED;;
esac

exit $?
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ldirectord&#34;&gt;ldirectord&lt;/h3&gt;

&lt;p&gt;ldirectord需从官网下载安装。&lt;/p&gt;

&lt;p&gt;由于ldirectord没有提供相应agent，我们这里也要增加相应agent。agent脚本可由pacemaker提供的模板改编而来，模版默认位于/usr/lib/ocf/resource.d/pacemaker/Dummy。&lt;/p&gt;

&lt;p&gt;这里为了简单，使用了systemd的agent。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件名：ldirectord.service&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Unit]
Description=ldirectord.service
After=network.target

[Service]
Type=forking
PIDFile=/var/run/ldirectord.ldirectord.pid
ExecStart=/sbin/ldirectord restart
ExecStop=/sbin/ldirectord stop
ExecReload=/sbin/ldirectord reload

[Install]
WantedBy=multi-user.target
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;inventory&#34;&gt;inventory&lt;/h3&gt;

&lt;p&gt;资产文件设置了三个主机，使用cluster用户进行部署。请根据实际情况进行调整。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件名：hosts&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[nodes]
node1 ip=192.168.122.111 ansible_user=cluster
node2 ip=192.168.122.112 ansible_user=cluster
node3 ip=192.168.122.113 ansible_user=cluster

[nodes:vars]
vip=192.168.122.100
port=80
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ldirectord-cf-j2&#34;&gt;ldirectord.cf.j2&lt;/h3&gt;

&lt;p&gt;ldirectord配置文件，请根据实际情况进行调整。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件名：ldirectord.cf.j2&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;checktimeout=3
checkinterval=10
autoreload=yes
quiescent=yes

virtual={{ vip }}:{{ port }}
{% for host in groups[&#39;nodes&#39;] %}
    real={{ hostvars[host].ip }}:{{ port }} gate
{% endfor %}
    checkport={{ port }}
    checktype=connect
    service=simpletcp
    scheduler=lc
    protocol=tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;playbook&#34;&gt;playbook&lt;/h3&gt;

&lt;p&gt;ansible使用pcs对pacemaker进行配置&lt;/p&gt;

&lt;p&gt;这里密码写死为123456。网卡写死为eth0。vip写死为192.168.122.100，与inventory中保持一致。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;文件名：lvs.yml&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
- hosts: nodes
  become: yes
  tasks:
  - name: Set a password for the hacluster user
    user: name=hacluster password=$6$rounds=656000$JBKx3dx31baJQ.zA$uBwQqkpLY/0SV7JxEHdKGcXfjQx6NZgvKoiZ/Z13NTFjn96UyTAqEKYjaGhJbY1lnT/F2c6zSITD8gpAEiMIe. update_password=always
  - name: Enable pcs
    service: name=pcsd.service state=started enabled=yes
  - name: Authenticate the hacluster user
    command: /usr/sbin/pcs cluster auth {{ groups[&#39;nodes&#39;] | join(&#39; &#39;) }} -u hacluster -p 123456
    run_once: true
  - name: Generate and synchronize the corosync
    command: /usr/sbin/pcs cluster setup --name mycluster {{ groups[&#39;nodes&#39;] | join(&#39; &#39;) }}
    run_once: true
  - name: Enable corysync
    service: name=corosync.service state=started enabled=yes
  - name: Enable pacemaker
    service: name=pacemaker.service state=started enabled=yes
  - name: Set property stonith
    command: /usr/sbin/pcs property set stonith-enabled=false
    run_once: true
  - name: Set rosource defaults
    command: /usr/sbin/pcs resource defaults resource-stickiness=100
    run_once: true

  - name: Create lvs agent
    copy: src={{ playbook_dir }}/lvs dest=/usr/lib/ocf/resource.d/heartbeat/lvs mode=755
  - name: Create lvs resource
    command: /usr/sbin/pcs resource create lvs ocf:heartbeat:lvs params nic=eth0 vip=192.168.122.100 --master
    run_once: true

  - name: Create ldirectord.cf
    template: src={{ playbook_dir }}/ldirectord.cf.j2 dest=/etc/ha.d/ldirectord.cf     
  - name: Create ldirectord.service
    copy: src={{ playbook_dir }}/ldirectord.service dest=/etc/systemd/system/ldirectord.service
  - name: Create ldirectord resource
    command: /usr/sbin/pcs resource create ldirectord systemd:ldirectord
    run_once: true

  - name: Create colocation constraint
    command: /usr/sbin/pcs constraint colocation add ldirectord with master lvs-master
    run_once: true
  - name: Create order constraint
    command: /usr/sbin/pcs constraint order promote lvs-master then ldirectord
    run_once: true
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;部署&#34;&gt;部署&lt;/h1&gt;

&lt;p&gt;ansible的配置这里省略了。部署命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook -i hosts lvs.yml -v
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;验证&#34;&gt;验证&lt;/h1&gt;

&lt;p&gt;在各机器启用验证实例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nc -l 80 -e /usr/bin/hostname -k
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在其它节点验证：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl 192.168.122.100
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;遗留问题&#34;&gt;遗留问题&lt;/h1&gt;

&lt;ol&gt;
&lt;li&gt;real server上不要连接vip，tcp通过vip连不出来，只能连接到本机。&lt;/li&gt;
&lt;li&gt;virtial server上不要连接vip，tcp通过vip如果刚好调度到本机可以连通，如果调度到real server上tcp超时。&lt;/li&gt;
&lt;li&gt;master节点网卡被ifdown时，vip偶尔挂不上。corosync能检测到，但pacemaker没有动作。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;问题1和问题2可能跟策略路由有关系，可由应用程序解决：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用实际IP地址&lt;/li&gt;
&lt;li&gt;使用额外vip，该vip不进行lvs配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;问题3是&lt;strong&gt;硬伤&lt;/strong&gt;，还需要进一步调查。&lt;/p&gt;

&lt;h1 id=&#34;q-a&#34;&gt;Q&amp;amp;A&lt;/h1&gt;

&lt;h3 id=&#34;为什么使用ldirectord&#34;&gt;为什么使用ldirectord？&lt;/h3&gt;

&lt;p&gt;使用ldirectord来更新lvs的调度规则，简化配置管理。&lt;/p&gt;

&lt;h3 id=&#34;为什么不用keepalived&#34;&gt;为什么不用keepalived？&lt;/h3&gt;

&lt;p&gt;如果项目只使用lvs调度，由于keepalived集成了ldirectord与pacemaker的功能，会更简单。&lt;/p&gt;

&lt;p&gt;但由于我们项目中还有其它服务要进行集群管理，使用pacemaker更灵活。&lt;/p&gt;

&lt;h3 id=&#34;为什么使用ansible&#34;&gt;为什么使用ansible?&lt;/h3&gt;

&lt;p&gt;为了简化集群部署，使用ansible部署工具实现集群一键部署的目标。像上面只用一条命令就可以部署整个集群。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>logging</title>
      <link>https://lidm1989.github.io/python/logging/</link>
      <pubDate>Sat, 08 Oct 2016 22:28:53 +0800</pubDate>
      
      <guid>https://lidm1989.github.io/python/logging/</guid>
      <description>

&lt;h1 id=&#34;一个简单的例子&#34;&gt;一个简单的例子&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;import logging
logging.warning(&#39;Watch out!&#39;)  # 输出到控制台
logging.info(&#39;I told you so&#39;)  # 什么都不输出
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;WARNING:root:Watch out!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logging默认输出到控制台，默认输出级别为WARNING，所以INFO级别没有输出。&lt;/p&gt;

&lt;h1 id=&#34;异常处理&#34;&gt;异常处理&lt;/h1&gt;

&lt;p&gt;logging为异常专门提供了&lt;code&gt;logger.exception()&lt;/code&gt;接口以便输出异常，该接口只应该在异常处理时使用。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;try:
    1/0
except:
    logging.exception(&#39;Excepion:&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR:root:Excepion:
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 2, in &amp;lt;module&amp;gt;
ZeroDivisionError: integer division or modulo by zero
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;配置日志&#34;&gt;配置日志&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;logging.basicConfig(filename=&#39;example.log&#39;,level=logging.DEBUG)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;basicConfig应该在记录日志之前被调用，可以被调用多次，但只有第一次调用会生效。&lt;/p&gt;

&lt;h1 id=&#34;高级话题&#34;&gt;高级话题&lt;/h1&gt;

&lt;p&gt;logging模块提供了loggers, handlers, filters, and formatters更加现代的组件:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loggers:    暴露接口以便应用程序直接调用&lt;/li&gt;
&lt;li&gt;Handlers:   将日志发送到相应目的地&lt;/li&gt;
&lt;li&gt;Filters:    对日志进行过滤&lt;/li&gt;
&lt;li&gt;Formatters: 指定日志的输出格式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;日志的传输方向为: looggers-&amp;gt;handlers-&amp;gt;filters-&amp;gt;formatters。&lt;/p&gt;

&lt;p&gt;logger在概念上处于一个树形结构的名字空间。例如：scan是scan.text、scan.html和scan.pdf的父亲。logger的名字可以是任意字符串，但通常使用模块名:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger = logging.getLogger(__name__)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;logger的根结点的名字为root:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;logger = logging.getLogger() 等价于 logger = logger.getLogger(&#39;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;日志流&#34;&gt;日志流&lt;/h1&gt;

&lt;figure&gt;
  &lt;img src=&#34;https://lidm1989.github.io/images/python/logging_flow.png&#34; alt=&#34;logging images/python/logging_flow.png&#34;&gt;
  
&lt;/figure&gt;


&lt;h1 id=&#34;loggers&#34;&gt;Loggers&lt;/h1&gt;

&lt;p&gt;logger对象有三个任务。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;导出接口以便应用程序进行调用&lt;/li&gt;
&lt;li&gt;通过filter对日志进程过滤&lt;/li&gt;
&lt;li&gt;将日志转发到感兴趣的logger对象&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;child loggers会转发日志到ancestor loggers，由属性&lt;code&gt;logger.propagate&lt;/code&gt;进行控制。鉴于此，通常只在root logger里设置handlers。&lt;/p&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/2/library/logging.html&#34;&gt;官方文档-Python2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.python.org/3/library/logging.html&#34;&gt;官方文档-Python3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>